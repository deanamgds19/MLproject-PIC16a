{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# HW3 - PageRank Algorithm\n",
    "### Deana Moghaddas, October 28th 2020\n",
    "\n",
    "### I affirm that I personally wrote the text, code and comments in this homework assignment.\n",
    "\n",
    "\n",
    "### PageRank\n",
    "\n",
    "What is the most important website on the internet? Who is the \"key player\" on a sports team? Which countries are the most central players in the world economy? There is no one correct answer to any of these questions, but there is a most profitable one. [PageRank](https://en.wikipedia.org/wiki/PageRank) is an algorithm for ranking individual elements of complex systems, invited by Sergey Brin and Larry Page. It was the first and most famous algorithm used by the Google Search engine, and it is fair to say that the internet as we know it today would not exist without PageRank. \n",
    "\n",
    "In this assignment, we will implement PageRank. There are many good ways to implement this algorithm, but in this assignment we will use our newfound skills with object-oriented programming and iterators. \n",
    "\n",
    "### How it works\n",
    "\n",
    "For the purposes of this example, let's assume that we are talking about webpages. PageRank works by allowing a \"random surfer\" to move around webpages by following links. Each time the surfer lands on a page, it then looks for all the links on that page. It then picks one at random and follows it, thereby arriving at the next page, where the process repeats. Eventually, the surfer will visit all the pages one or more times. Pages that the surfer visits more frequently have higher *PageRank scores*. Because the surfer moves between linked pages, PageRank expresses an intuitive idea: **important pages are linked to other important pages.** [This diagram](https://en.wikipedia.org/wiki/PageRank#/media/File:PageRanks-Example.jpg) from Wikipedia gives a nice illustration. Note that more important webpages (higher PageRank) tend to be connected to other important webpages. \n",
    "\n",
    "<figure class=\"image\" style=\"width:50%\">\n",
    "  <img src=\"https://upload.wikimedia.org/wikipedia/en/thumb/8/8b/PageRanks-Example.jpg/1920px-PageRanks-Example.jpg\n",
    "\" alt=\"A set of 11 circles, with arrows between them. Some of the circles are larger than others, reflecting their high PageRank score. Large circles tend to be linked to other large circles by arrows.\" width=\"300px\">\n",
    "  <figcaption><i>A schematic for PageRank. </i></figcaption>\n",
    "</figure>\n",
    "\n",
    "### Data\n",
    "\n",
    "You can complete this assignment using data from one of two sources. \n",
    "\n",
    "#### Option 1: Hamilton\n",
    "\n",
    "This data set comes from the hit Broadway musical \"Hamilton.\"\n",
    "\n",
    "<figure class=\"image\" style=\"width:50%\">\n",
    "  <img src=\"https://pbs.twimg.com/profile_images/1277989982171430914/Oiyyv_7__400x400.jpg\" alt=\"The logo of the musical Hamilton, showing a silhouette dressed in period custom standing on top of a five-pointed star.\" width=\"300px\">\n",
    "  <figcaption><i>The Hamilton data set</i></figcaption>\n",
    "</figure>\n",
    "\n",
    "The good folks at [The Hamilton Project](http://hamilton.newtfire.org/) analyzed the script for us, obtaining data on **who talks about whom** in each of the show's songs. When character A mentions character B, we'll think of this as a *link* from A to B, suggesting that B might be important. \n",
    "\n",
    "If you use this data set, listening to the soundtrack while working is strongly recommended. \n",
    "\n",
    "#### Option 2: Global Airline Network\n",
    "\n",
    "\n",
    "<figure class=\"image\" style=\"width:50%\">\n",
    "  <img src=\"https://openflights.org/demo/openflights-routedb.png\" alt=\"A map of the world, with many curved green lines connecting different points on the map. The points are airports, and the curved green lines are flight routes.\" width=\"300px\">\n",
    "  <figcaption><i>The global airline network</i></figcaption>\n",
    "</figure>\n",
    "\n",
    "Back in the Before Times, lots of people flew on airplanes. This data set includes a \"link\" from Airport A to Airport B whenever there is a flight from B to A. This data set was collected by the [OpenFlights Project](https://openflights.org/data.html). \n",
    "\n",
    "## (A). Define Functions\n",
    "\n",
    "In this part, all you have to do is hit `shift + enter` on the code block supplied below. This block defines two functions. The first one retrieves the data from the internet and saves it to your local computer, while the second reads in the data, producing a list of tuples. It's not important for you to be familiar with the code in these functions right now -- we'll discuss them early in Week 4. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 88,
   "metadata": {},
   "outputs": [],
   "source": [
    "import urllib\n",
    "import csv\n",
    "\n",
    "def retrieve_data(url):\n",
    "    \"\"\"\n",
    "    Retrieve a file from the specified url and save it in a local file \n",
    "    called data.csv. The intended values of url are: \n",
    "    \n",
    "    1. https://philchodrow.github.io/PIC16A/homework/HW3-hamilton-data.csv\n",
    "    2. https://philchodrow.github.io/PIC16A/homework/HW3-flights-data.csv\n",
    "    \"\"\"\n",
    "    \n",
    "    # grab the data and parse it\n",
    "    filedata = urllib.request.urlopen(url) \n",
    "    to_write = filedata.read()\n",
    "    \n",
    "    # write to file\n",
    "    with open(\"data.csv\", \"wb\") as f:\n",
    "        f.write(to_write)\n",
    "        \n",
    "def read_data(path):\n",
    "    \"\"\"\n",
    "    read downloaded data from a .csv file, and return a list of tuples. \n",
    "    each tuple represents a link between states. \n",
    "    \"\"\"\n",
    "    with open(path, \"r\") as f:\n",
    "        reader = csv.reader(f)\n",
    "        return [(row[0], row[1]) for row in list(reader)]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## (B). Grab the Data\n",
    "\n",
    "The data live at the following URLs: \n",
    "\n",
    "- **Hamilton**:  `https://philchodrow.github.io/PIC16A/homework/HW3-hamilton-data.csv`\n",
    "- **Airline**:   `https://philchodrow.github.io/PIC16A/homework/HW3-flights-data.csv` \n",
    "\n",
    "In each data set, each row corresponds to a \"link\" between objects. In Hamilton, the pairs have format `mentioner, mentioned` while in the airline network the rows have format `origin, destination.`\n",
    "\n",
    "Pick one of these data sets, and set the variable `url` appropriately by uncommenting one of the two lines below. Then, call `retrieve_data()` and `read_data()`. Create a variable called `data` to hold the return value of `read_data()`. \n",
    "\n",
    "#### Your solution"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 89,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[('burr', 'hamilton'),\n",
       " ('burr', 'weeks'),\n",
       " ('burr', 'madison'),\n",
       " ('burr', 'jay'),\n",
       " ('burr', 'theodosiaDaughter'),\n",
       " ('burr', 'betsy'),\n",
       " ('burr', 'theodosiaMother'),\n",
       " ('burr', 'hamilton'),\n",
       " ('burr', 'hamilton'),\n",
       " ('burr', 'hamilton'),\n",
       " ('burr', 'washington'),\n",
       " ('burr', 'hamilton'),\n",
       " ('burr', 'marthaWashington'),\n",
       " ('burr', 'schuylerSis'),\n",
       " ('burr', 'washington'),\n",
       " ('burr', 'burr'),\n",
       " ('burr', 'generalMontgomery'),\n",
       " ('burr', 'hamilton'),\n",
       " ('burr', 'philipS'),\n",
       " ('burr', 'peggy'),\n",
       " ('burr', 'angelica'),\n",
       " ('burr', 'eliza'),\n",
       " ('burr', 'hamilton'),\n",
       " ('burr', 'reynolds'),\n",
       " ('burr', 'hamilton'),\n",
       " ('burr', 'washington'),\n",
       " ('burr', 'hamilton'),\n",
       " ('burr', 'philipS'),\n",
       " ('burr', 'generalMercer'),\n",
       " ('burr', 'madison'),\n",
       " ('burr', 'jefferson'),\n",
       " ('burr', 'washington'),\n",
       " ('burr', 'hamilton'),\n",
       " ('burr', 'washington'),\n",
       " ('burr', 'jefferson'),\n",
       " ('burr', 'jefferson'),\n",
       " ('burr', 'madison'),\n",
       " ('burr', 'burr'),\n",
       " ('burr', 'hamilton'),\n",
       " ('burr', 'hamilton'),\n",
       " ('burr', 'jAdams'),\n",
       " ('burr', 'jefferson'),\n",
       " ('burr', 'hamilton'),\n",
       " ('burr', 'jefferson'),\n",
       " ('burr', 'burr'),\n",
       " ('burr', 'ness'),\n",
       " ('burr', 'hamilton'),\n",
       " ('burr', 'pendleton'),\n",
       " ('burr', 'angelica'),\n",
       " ('burr', 'eliza'),\n",
       " ('hamilton', 'burr'),\n",
       " ('hamilton', 'angelica'),\n",
       " ('hamilton', 'philipH'),\n",
       " ('hamilton', 'lafayette'),\n",
       " ('hamilton', 'eliza'),\n",
       " ('hamilton', 'laurens'),\n",
       " ('hamilton', 'mulligan'),\n",
       " ('hamilton', 'washington'),\n",
       " ('hamilton', 'eliza'),\n",
       " ('hamilton', 'lee'),\n",
       " ('hamilton', 'laurens'),\n",
       " ('hamilton', 'conway'),\n",
       " ('hamilton', 'hamilton'),\n",
       " ('hamilton', 'washington'),\n",
       " ('hamilton', 'lee'),\n",
       " ('hamilton', 'laurens'),\n",
       " ('hamilton', 'burr'),\n",
       " ('hamilton', 'washington'),\n",
       " ('hamilton', 'hamilton'),\n",
       " ('hamilton', 'burr'),\n",
       " ('hamilton', 'lee'),\n",
       " ('hamilton', 'burr'),\n",
       " ('hamilton', 'eliza'),\n",
       " ('hamilton', 'peggy'),\n",
       " ('hamilton', 'angelica'),\n",
       " ('hamilton', 'hamilton'),\n",
       " ('hamilton', 'laurens'),\n",
       " ('hamilton', 'mulligan'),\n",
       " ('hamilton', 'lafayette'),\n",
       " ('hamilton', 'burr'),\n",
       " ('hamilton', 'kingGeorge'),\n",
       " ('hamilton', 'burr'),\n",
       " ('hamilton', 'lafayette'),\n",
       " ('hamilton', 'laurens'),\n",
       " ('hamilton', 'burr'),\n",
       " ('hamilton', 'hamilton'),\n",
       " ('hamilton', 'reynolds'),\n",
       " ('hamilton', 'eliza'),\n",
       " ('hamilton', 'angelica'),\n",
       " ('hamilton', 'philipH'),\n",
       " ('hamilton', 'eliza'),\n",
       " ('hamilton', 'eacker'),\n",
       " ('hamilton', 'philipH'),\n",
       " ('hamilton', 'eliza'),\n",
       " ('hamilton', 'reynolds'),\n",
       " ('hamilton', 'jefferson'),\n",
       " ('hamilton', 'madison'),\n",
       " ('hamilton', 'burr'),\n",
       " ('hamilton', 'reynolds'),\n",
       " ('hamilton', 'washington'),\n",
       " ('hamilton', 'jefferson'),\n",
       " ('hamilton', 'washington'),\n",
       " ('hamilton', 'kingLouis'),\n",
       " ('hamilton', 'lafayette'),\n",
       " ('hamilton', 'burr'),\n",
       " ('hamilton', 'burr'),\n",
       " ('hamilton', 'angelica'),\n",
       " ('hamilton', 'maria'),\n",
       " ('hamilton', 'reynolds'),\n",
       " ('hamilton', 'angelica'),\n",
       " ('hamilton', 'madison'),\n",
       " ('hamilton', 'jefferson'),\n",
       " ('hamilton', 'eliza'),\n",
       " ('hamilton', 'schuylerSis'),\n",
       " ('hamilton', 'jAdams'),\n",
       " ('hamilton', 'jefferson'),\n",
       " ('hamilton', 'washington'),\n",
       " ('hamilton', 'madison'),\n",
       " ('hamilton', 'jefferson'),\n",
       " ('hamilton', 'hamilton'),\n",
       " ('hamilton', 'philipH'),\n",
       " ('hamilton', 'eliza'),\n",
       " ('hamilton', 'burr'),\n",
       " ('hamilton', 'jefferson'),\n",
       " ('hamilton', 'jAdams'),\n",
       " ('hamilton', 'burr'),\n",
       " ('hamilton', 'hamilton'),\n",
       " ('hamilton', 'burr'),\n",
       " ('hamilton', 'laurens'),\n",
       " ('hamilton', 'washington'),\n",
       " ('hamilton', 'eliza'),\n",
       " ('ensemble', 'washington'),\n",
       " ('ensemble', 'kingGeorge'),\n",
       " ('ensemble', 'jefferson'),\n",
       " ('ensemble', 'burr'),\n",
       " ('ensemble', 'hamilton'),\n",
       " ('ensemble', 'jAdams'),\n",
       " ('ensemble', 'jefferson'),\n",
       " ('company', 'hamilton'),\n",
       " ('company', 'mulligan'),\n",
       " ('company', 'lafayette'),\n",
       " ('company', 'hamilton'),\n",
       " ('company', 'washington'),\n",
       " ('company', 'hamilton'),\n",
       " ('company', 'admiralHowe'),\n",
       " ('company', 'washington'),\n",
       " ('company', 'kingGeorge'),\n",
       " ('company', 'schuylerSis'),\n",
       " ('company', 'angelica'),\n",
       " ('company', 'reynolds'),\n",
       " ('company', 'washington'),\n",
       " ('company', 'jefferson'),\n",
       " ('company', 'hamilton'),\n",
       " ('company', 'burr'),\n",
       " ('company', 'jefferson'),\n",
       " ('company', 'eliza'),\n",
       " ('company', 'jAdams'),\n",
       " ('company', 'burr'),\n",
       " ('men', 'hamilton'),\n",
       " ('men', 'angelica'),\n",
       " ('men', 'jAdams'),\n",
       " ('men', 'jefferson'),\n",
       " ('men', 'burr'),\n",
       " ('women', 'hamilton'),\n",
       " ('women', 'angelica'),\n",
       " ('women', 'washington'),\n",
       " ('women', 'eliza'),\n",
       " ('women', 'burr'),\n",
       " ('women', 'jefferson'),\n",
       " ('angelica', 'hamilton'),\n",
       " ('angelica', 'hamilton'),\n",
       " ('angelica', 'angelica'),\n",
       " ('angelica', 'franklin'),\n",
       " ('angelica', 'schuylerSis'),\n",
       " ('angelica', 'eliza'),\n",
       " ('angelica', 'angelica'),\n",
       " ('angelica', 'eliza'),\n",
       " ('angelica', 'burr'),\n",
       " ('angelica', 'paine'),\n",
       " ('angelica', 'jefferson'),\n",
       " ('angelica', 'schuylerSis'),\n",
       " ('angelica', 'hamilton'),\n",
       " ('angelica', 'jefferson'),\n",
       " ('angelica', 'angelica'),\n",
       " ('angelica', 'eliza'),\n",
       " ('angelica', 'angelica'),\n",
       " ('angelica', 'hamilton'),\n",
       " ('angelica', 'eliza'),\n",
       " ('angelica', 'angelica'),\n",
       " ('angelica', 'eliza'),\n",
       " ('eliza', 'hamilton'),\n",
       " ('eliza', 'washington'),\n",
       " ('eliza', 'hamilton'),\n",
       " ('eliza', 'eliza'),\n",
       " ('eliza', 'eliza'),\n",
       " ('eliza', 'eliza'),\n",
       " ('eliza', 'angelica'),\n",
       " ('eliza', 'schuylerSis'),\n",
       " ('eliza', 'angelica'),\n",
       " ('eliza', 'eliza'),\n",
       " ('eliza', 'hamilton'),\n",
       " ('eliza', 'hamilton'),\n",
       " ('eliza', 'philipH'),\n",
       " ('eliza', 'angelica'),\n",
       " ('eliza', 'jAdams'),\n",
       " ('eliza', 'angelica'),\n",
       " ('eliza', 'washington'),\n",
       " ('eliza', 'hamilton'),\n",
       " ('eliza', 'hamilton'),\n",
       " ('washington', 'rochambeau'),\n",
       " ('washington', 'hamilton'),\n",
       " ('washington', 'burr'),\n",
       " ('washington', 'lee'),\n",
       " ('washington', 'hamilton'),\n",
       " ('washington', 'hamilton'),\n",
       " ('washington', 'lee'),\n",
       " ('washington', 'lafayette'),\n",
       " ('washington', 'hamilton'),\n",
       " ('washington', 'burr'),\n",
       " ('washington', 'green'),\n",
       " ('washington', 'knox'),\n",
       " ('washington', 'jefferson'),\n",
       " ('washington', 'jefferson'),\n",
       " ('washington', 'hamilton'),\n",
       " ('washington', 'burr'),\n",
       " ('washington', 'hamilton'),\n",
       " ('washington', 'jefferson'),\n",
       " ('washington', 'madison'),\n",
       " ('washington', 'jefferson'),\n",
       " ('mulligan', 'mulligan'),\n",
       " ('mulligan', 'hamilton'),\n",
       " ('mulligan', 'burr'),\n",
       " ('mulligan', 'mulligan'),\n",
       " ('mulligan', 'burr'),\n",
       " ('lafayette', 'hamilton'),\n",
       " ('lafayette', 'hamilton'),\n",
       " ('lafayette', 'burr'),\n",
       " ('lafayette', 'lafayette'),\n",
       " ('laurens', 'hamilton'),\n",
       " ('laurens', 'lee'),\n",
       " ('laurens', 'burr'),\n",
       " ('laurens', 'angelica'),\n",
       " ('laurens', 'laurens'),\n",
       " ('laurens', 'sAdams'),\n",
       " ('laurens', 'burr'),\n",
       " ('kingGeorge', 'washington'),\n",
       " ('kingGeorge', 'jAdams'),\n",
       " ('jefferson', 'hamilton'),\n",
       " ('jefferson', 'reynolds'),\n",
       " ('jefferson', 'eliza'),\n",
       " ('jefferson', 'hamilton'),\n",
       " ('jefferson', 'washington'),\n",
       " ('jefferson', 'hamilton'),\n",
       " ('jefferson', 'washington'),\n",
       " ('jefferson', 'lafayette'),\n",
       " ('jefferson', 'hamilton'),\n",
       " ('jefferson', 'washington'),\n",
       " ('jefferson', 'madison'),\n",
       " ('jefferson', 'burr'),\n",
       " ('jefferson', 'hamilton'),\n",
       " ('jefferson', 'lafayette'),\n",
       " ('jefferson', 'washington'),\n",
       " ('jefferson', 'sally'),\n",
       " ('jefferson', 'madison'),\n",
       " ('jefferson', 'jAdams'),\n",
       " ('jefferson', 'hamilton'),\n",
       " ('jefferson', 'burr'),\n",
       " ('jefferson', 'washington'),\n",
       " ('jefferson', 'hamilton'),\n",
       " ('madison', 'hamilton'),\n",
       " ('madison', 'washington'),\n",
       " ('madison', 'hamilton'),\n",
       " ('madison', 'hamilton'),\n",
       " ('madison', 'burr'),\n",
       " ('madison', 'jefferson'),\n",
       " ('madison', 'hamilton'),\n",
       " ('madison', 'burr'),\n",
       " ('madison', 'jefferson'),\n",
       " ('madison', 'hamilton'),\n",
       " ('madison', 'jAdams'),\n",
       " ('philipH', 'eacker'),\n",
       " ('philipH', 'philipH'),\n",
       " ('philipH', 'philipS'),\n",
       " ('philipH', 'burr'),\n",
       " ('philipH', 'philipH'),\n",
       " ('lee', 'lee'),\n",
       " ('lee', 'washington'),\n",
       " ('peggy', 'peggy'),\n",
       " ('peggy', 'schuylerSis'),\n",
       " ('seabury', 'seabury'),\n",
       " ('seabury', 'kingGeorge'),\n",
       " ('reynolds', 'reynolds'),\n",
       " ('doctor', 'hamilton')]"
      ]
     },
     "execution_count": 89,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# uncomment the second line if you'd prefer to \n",
    "# work with the flights data. \n",
    "url = \"https://philchodrow.github.io/PIC16A/homework/HW3-hamilton-data.csv\"\n",
    "#url = \"https://philchodrow.github.io/PIC16A/homework/HW3-flights-data.csv\"\n",
    "\n",
    "# Call your functions below\n",
    "retrieve_data(url)\n",
    "data = read_data(\"data.csv\")\n",
    "data"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## (C). Examine the structure of the data\n",
    "\n",
    "This would also be a good time to inspect the data to make sure you understand how it is structured. Write a function `describe(n)` that describes the meaning of the `n`th row of the data set you chose. In the Hamilton data set, your function should do the following: \n",
    "\n",
    "```python\n",
    "describe(5)\n",
    "\n",
    "# output\n",
    "\"Element 5 of the Hamilton data set is ('burr', 'betsy'). This means that Burr mentions Betsy in a song.\" \n",
    "```\n",
    "\n",
    "In context of the airline flights data, your function should instead do this: \n",
    "\n",
    "```python\n",
    "describe(5)\n",
    "\n",
    "# output\n",
    "\"Element 5 of the flights data set is ('SIN', 'BKK'). This means that there is a flight from BKK to SIN.\" \n",
    "```\n",
    "\n",
    "Please attend to capitalization and formatting. While the standard string concatenation operator `+` is completely fine for this task, the fancy `str.format()` function may make your code somewhat simpler. [This page](https://realpython.com/python-formatted-output/) has some useful examples in case you'd like to try this. \n",
    "\n",
    "\n",
    "#### Your Solution"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 91,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Element 5 of the Hamilton data set is ('burr', 'betsy'). This means that burr mentions betsy in a song.\n"
     ]
    }
   ],
   "source": [
    "def describe(n):\n",
    "    \"\"\"\n",
    "    Takes integer n to return element number and associated values within the context of a string sentence.\n",
    "    \"\"\"\n",
    "    print(\"Element \" + str(n) + \" of the Hamilton data set is \" + str(data[n]) + \". This means that \" + str(data[n][0]) + \" mentions \" + str(data[n][1]) + \" in a song.\")\n",
    "    \n",
    "describe(5)\n",
    "    "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## (D). Data to Dictionary\n",
    "\n",
    "Write a function called `data_to_dictionary` that converts the data into a dictionary such that: \n",
    "\n",
    "1. There is a single key for each character (in Hamilton) or airport (in flights). \n",
    "2. The value corresponding to each key is a list of the characters/airports to which that key links. The list should contain repeats if there are multiple links. \n",
    "\n",
    "Here's an example of the desired behavior on a fake data set. \n",
    "\n",
    "```python\n",
    "data = [(\"a\", \"b\"), \n",
    "        (\"a\", \"b\"), \n",
    "        (\"a\", \"c\"),\n",
    "        (\"b\", \"c\"),\n",
    "        (\"b\", \"a\")]\n",
    "        \n",
    "data_to_dictionary(data)\n",
    "\n",
    "# output\n",
    "{\"a\" : [\"b\", \"b\", \"c\"], \"b\" : [\"a\", \"c\"]}\n",
    "\n",
    "```\n",
    "\n",
    "#### Your Solution"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 92,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'burr': ['hamilton',\n",
       "  'weeks',\n",
       "  'madison',\n",
       "  'jay',\n",
       "  'theodosiaDaughter',\n",
       "  'betsy',\n",
       "  'theodosiaMother',\n",
       "  'hamilton',\n",
       "  'hamilton',\n",
       "  'hamilton',\n",
       "  'washington',\n",
       "  'hamilton',\n",
       "  'marthaWashington',\n",
       "  'schuylerSis',\n",
       "  'washington',\n",
       "  'burr',\n",
       "  'generalMontgomery',\n",
       "  'hamilton',\n",
       "  'philipS',\n",
       "  'peggy',\n",
       "  'angelica',\n",
       "  'eliza',\n",
       "  'hamilton',\n",
       "  'reynolds',\n",
       "  'hamilton',\n",
       "  'washington',\n",
       "  'hamilton',\n",
       "  'philipS',\n",
       "  'generalMercer',\n",
       "  'madison',\n",
       "  'jefferson',\n",
       "  'washington',\n",
       "  'hamilton',\n",
       "  'washington',\n",
       "  'jefferson',\n",
       "  'jefferson',\n",
       "  'madison',\n",
       "  'burr',\n",
       "  'hamilton',\n",
       "  'hamilton',\n",
       "  'jAdams',\n",
       "  'jefferson',\n",
       "  'hamilton',\n",
       "  'jefferson',\n",
       "  'burr',\n",
       "  'ness',\n",
       "  'hamilton',\n",
       "  'pendleton',\n",
       "  'angelica',\n",
       "  'eliza'],\n",
       " 'hamilton': ['burr',\n",
       "  'angelica',\n",
       "  'philipH',\n",
       "  'lafayette',\n",
       "  'eliza',\n",
       "  'laurens',\n",
       "  'mulligan',\n",
       "  'washington',\n",
       "  'eliza',\n",
       "  'lee',\n",
       "  'laurens',\n",
       "  'conway',\n",
       "  'hamilton',\n",
       "  'washington',\n",
       "  'lee',\n",
       "  'laurens',\n",
       "  'burr',\n",
       "  'washington',\n",
       "  'hamilton',\n",
       "  'burr',\n",
       "  'lee',\n",
       "  'burr',\n",
       "  'eliza',\n",
       "  'peggy',\n",
       "  'angelica',\n",
       "  'hamilton',\n",
       "  'laurens',\n",
       "  'mulligan',\n",
       "  'lafayette',\n",
       "  'burr',\n",
       "  'kingGeorge',\n",
       "  'burr',\n",
       "  'lafayette',\n",
       "  'laurens',\n",
       "  'burr',\n",
       "  'hamilton',\n",
       "  'reynolds',\n",
       "  'eliza',\n",
       "  'angelica',\n",
       "  'philipH',\n",
       "  'eliza',\n",
       "  'eacker',\n",
       "  'philipH',\n",
       "  'eliza',\n",
       "  'reynolds',\n",
       "  'jefferson',\n",
       "  'madison',\n",
       "  'burr',\n",
       "  'reynolds',\n",
       "  'washington',\n",
       "  'jefferson',\n",
       "  'washington',\n",
       "  'kingLouis',\n",
       "  'lafayette',\n",
       "  'burr',\n",
       "  'burr',\n",
       "  'angelica',\n",
       "  'maria',\n",
       "  'reynolds',\n",
       "  'angelica',\n",
       "  'madison',\n",
       "  'jefferson',\n",
       "  'eliza',\n",
       "  'schuylerSis',\n",
       "  'jAdams',\n",
       "  'jefferson',\n",
       "  'washington',\n",
       "  'madison',\n",
       "  'jefferson',\n",
       "  'hamilton',\n",
       "  'philipH',\n",
       "  'eliza',\n",
       "  'burr',\n",
       "  'jefferson',\n",
       "  'jAdams',\n",
       "  'burr',\n",
       "  'hamilton',\n",
       "  'burr',\n",
       "  'laurens',\n",
       "  'washington',\n",
       "  'eliza'],\n",
       " 'ensemble': ['washington',\n",
       "  'kingGeorge',\n",
       "  'jefferson',\n",
       "  'burr',\n",
       "  'hamilton',\n",
       "  'jAdams',\n",
       "  'jefferson'],\n",
       " 'company': ['hamilton',\n",
       "  'mulligan',\n",
       "  'lafayette',\n",
       "  'hamilton',\n",
       "  'washington',\n",
       "  'hamilton',\n",
       "  'admiralHowe',\n",
       "  'washington',\n",
       "  'kingGeorge',\n",
       "  'schuylerSis',\n",
       "  'angelica',\n",
       "  'reynolds',\n",
       "  'washington',\n",
       "  'jefferson',\n",
       "  'hamilton',\n",
       "  'burr',\n",
       "  'jefferson',\n",
       "  'eliza',\n",
       "  'jAdams',\n",
       "  'burr'],\n",
       " 'men': ['hamilton', 'angelica', 'jAdams', 'jefferson', 'burr'],\n",
       " 'women': ['hamilton', 'angelica', 'washington', 'eliza', 'burr', 'jefferson'],\n",
       " 'angelica': ['hamilton',\n",
       "  'hamilton',\n",
       "  'angelica',\n",
       "  'franklin',\n",
       "  'schuylerSis',\n",
       "  'eliza',\n",
       "  'angelica',\n",
       "  'eliza',\n",
       "  'burr',\n",
       "  'paine',\n",
       "  'jefferson',\n",
       "  'schuylerSis',\n",
       "  'hamilton',\n",
       "  'jefferson',\n",
       "  'angelica',\n",
       "  'eliza',\n",
       "  'angelica',\n",
       "  'hamilton',\n",
       "  'eliza',\n",
       "  'angelica',\n",
       "  'eliza'],\n",
       " 'eliza': ['hamilton',\n",
       "  'washington',\n",
       "  'hamilton',\n",
       "  'eliza',\n",
       "  'eliza',\n",
       "  'eliza',\n",
       "  'angelica',\n",
       "  'schuylerSis',\n",
       "  'angelica',\n",
       "  'eliza',\n",
       "  'hamilton',\n",
       "  'hamilton',\n",
       "  'philipH',\n",
       "  'angelica',\n",
       "  'jAdams',\n",
       "  'angelica',\n",
       "  'washington',\n",
       "  'hamilton',\n",
       "  'hamilton'],\n",
       " 'washington': ['rochambeau',\n",
       "  'hamilton',\n",
       "  'burr',\n",
       "  'lee',\n",
       "  'hamilton',\n",
       "  'hamilton',\n",
       "  'lee',\n",
       "  'lafayette',\n",
       "  'hamilton',\n",
       "  'burr',\n",
       "  'green',\n",
       "  'knox',\n",
       "  'jefferson',\n",
       "  'jefferson',\n",
       "  'hamilton',\n",
       "  'burr',\n",
       "  'hamilton',\n",
       "  'jefferson',\n",
       "  'madison',\n",
       "  'jefferson'],\n",
       " 'mulligan': ['mulligan', 'hamilton', 'burr', 'mulligan', 'burr'],\n",
       " 'lafayette': ['hamilton', 'hamilton', 'burr', 'lafayette'],\n",
       " 'laurens': ['hamilton',\n",
       "  'lee',\n",
       "  'burr',\n",
       "  'angelica',\n",
       "  'laurens',\n",
       "  'sAdams',\n",
       "  'burr'],\n",
       " 'kingGeorge': ['washington', 'jAdams'],\n",
       " 'jefferson': ['hamilton',\n",
       "  'reynolds',\n",
       "  'eliza',\n",
       "  'hamilton',\n",
       "  'washington',\n",
       "  'hamilton',\n",
       "  'washington',\n",
       "  'lafayette',\n",
       "  'hamilton',\n",
       "  'washington',\n",
       "  'madison',\n",
       "  'burr',\n",
       "  'hamilton',\n",
       "  'lafayette',\n",
       "  'washington',\n",
       "  'sally',\n",
       "  'madison',\n",
       "  'jAdams',\n",
       "  'hamilton',\n",
       "  'burr',\n",
       "  'washington',\n",
       "  'hamilton'],\n",
       " 'madison': ['hamilton',\n",
       "  'washington',\n",
       "  'hamilton',\n",
       "  'hamilton',\n",
       "  'burr',\n",
       "  'jefferson',\n",
       "  'hamilton',\n",
       "  'burr',\n",
       "  'jefferson',\n",
       "  'hamilton',\n",
       "  'jAdams'],\n",
       " 'philipH': ['eacker', 'philipH', 'philipS', 'burr', 'philipH'],\n",
       " 'lee': ['lee', 'washington'],\n",
       " 'peggy': ['peggy', 'schuylerSis'],\n",
       " 'seabury': ['seabury', 'kingGeorge'],\n",
       " 'reynolds': ['reynolds'],\n",
       " 'doctor': ['hamilton']}"
      ]
     },
     "execution_count": 92,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "def data_to_dictionary(data):\n",
    "    \"\"\"\n",
    "    Takes data as argument and creates dictionary that takes first indexes of tuples as keys and second indexes\n",
    "    of tuples as values within a list matching to key/first index in which it was the second index of. \n",
    "    \"\"\"\n",
    "    D = {}\n",
    "\n",
    "    for i in data: #iterate over every tuple in data\n",
    "        D[i[0]] = [] #first tuple becomes key and append\n",
    "    \n",
    "    for s in data: #iterate over every tuple\n",
    "        D[s[0]] += tuple([s[1]]) #key = first value, add 2nd value \n",
    "    \n",
    "    return(D)\n",
    "    \n",
    "data_to_dictionary(data)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## (E). Define a PR_DiGraph class\n",
    "\n",
    "A **directed graph**, or DiGraph, is just a set of arrows (\"edges\") between objects (\"nodes\"). It is a natural way to represent data that represents one-way relationships, such as links from one webpage to another or mentions of one character by another. We already saw a directed graph above when we introduced the idea of PageRank. Here's a paired-down example. \n",
    "\n",
    "<figure class=\"image\" style=\"width:50%\">\n",
    "  <img src=\"https://computersciencewiki.org/images/c/c6/Directed_graph.png\" alt=\"Six circles, representing nodes, labeled A through F. There are directed arrows between certain pairs of nodes.\" width=\"300px\">\n",
    "  <figcaption><i>Example of a directed graph. </i></figcaption>\n",
    "</figure>\n",
    "\n",
    "Implement a `PR_DiGraph` class with a custom `__init__()` method and a `linked_by()` method. The `__init__()` method should accept two arguments: `data` and `iteration_limit`. The `__init__()` method should then construct an instance variable `self.link_dict` which is simply the output of `data_to_dictionary` applied to the argument `data`. `__init__()` should also construct an instance variable `self.iteration_limit`, which simply takes the value of `iteration_limit` supplied to `__init__()`. Don't worry about that one for now. \n",
    "\n",
    "Then, define a method `self.linked_by(x)` which, when called, returns the value `self.link_dict[x]`.  \n",
    "\n",
    "Finally, add an `__iter__` method, which returns an object of class `PR_Iterator`. We will define this class in the next part.  \n",
    "\n",
    "Example session (using Hamilton): \n",
    "\n",
    "```python \n",
    "D = PR_DiGraph(data, iteration_limit = 10000)\n",
    "D.linked_by('peggy')\n",
    "\n",
    "# output\n",
    "['peggy', 'schuylerSis']\n",
    "```\n",
    "\n",
    "#### Your Solution"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 93,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['peggy', 'schuylerSis']"
      ]
     },
     "execution_count": 93,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "class PR_DiGraph:\n",
    "    \n",
    "    def __init__(self, data, iteration_limit):\n",
    "        \"\"\"\n",
    "        Initializes all arguments for instances of PR_Digraph class\n",
    "        \"\"\"\n",
    "        self.data = data\n",
    "        self.iteration_limit = iteration_limit\n",
    "        self.link_dict = data_to_dictionary(data)\n",
    "    \n",
    "    def linked_by(self, x):\n",
    "        \"\"\"\n",
    "        Returns the character(s) that are values of the given key (argument x)\n",
    "        \"\"\"\n",
    "        return(self.link_dict[x])\n",
    "    \n",
    "    def __iter__(self): \n",
    "        \"\"\"\n",
    "        Returns iterator object\n",
    "        \"\"\"\n",
    "        return(PR_iterator(self))\n",
    "        \n",
    "D = PR_DiGraph(data, iteration_limit = 10000)\n",
    "D.linked_by('peggy')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## (F). Implement PR_Iterator\n",
    "\n",
    "Define a `PR_Iterator` class with a custom `__next__()` method. \n",
    "\n",
    "The `__init__` method of this class should create instance variables to store the `PR_DiGraph` object from which it was constructed; a counter `i`, starting at 0, to log the number of steps taken, and a `current_state` variable whose value is one of the keys of the `link_dict` of the `Pr_DiGraph`. You can choose its initial value arbitrarily; in my solution code I chose `self.current_state = \"hamilton\"`.\n",
    "\n",
    "We are going to use iteration to implement the PageRank algorithm. This  means we are going to imagine a surfer who is following the links in our data set. **Implement the following two methods:** \n",
    "\n",
    "1. `follow_link()`. \n",
    "    1. Pick a random new character mentioned by the current character, or new airport served by the current airport. Let's call this `next_state`. \n",
    "    2. If `next_state != current_state`, set `current_state` to `next_state`. \n",
    "    3. Otherwise (if `next_state == current_state`), teleport (see below). \n",
    "    4. You might run into `KeyError`s, in which case you should again teleport (use a `try-except` block). \n",
    "2. `teleport()`. \n",
    "    1. Set the current state to a new state (key of the link dict) completely at random. \n",
    "\n",
    "*Hint*: use `random.choice` from the `random` module to choose elements of lists. \n",
    "\n",
    "Finally, **implement** `__next__()`. `__next__()` should do `follow_link()` with 85% probability, and do `teleport()` with 15% probability. You should also define a custom `StopIteration` condition to ensure that only as many steps are taken as the `iteration_limit` supplied to the `PR_DiGraph` initializer.\n",
    "\n",
    "1. To do something with 85% probability, use the following: \n",
    "\n",
    "```\n",
    "if random.random() < 0.85:\n",
    "    # do the thing\n",
    "else:\n",
    "    # do the other thing\n",
    "```\n",
    "\n",
    "\n",
    "#### Example Usage\n",
    "\n",
    "After you define your class, run the following code and show that it works. Note: your precise sequence may be different from mine. \n",
    "\n",
    "```python\n",
    "D = PR_DiGraph(data, iteration_limit = 5)\n",
    "for char in D:\n",
    "    print(char)\n",
    "    \n",
    "following link : current state = burr\n",
    "following link : current state = washington\n",
    "following link : current state = burr\n",
    "following link : current state = hamilton\n",
    "teleporting    : current state = washington\n",
    "```\n",
    "\n",
    "I have added printed messages here for you to more clearly see what should be happening, but it is not necessary for you to do this. It is sufficient for your output to look like: \n",
    "\n",
    "```python\n",
    "D = PR_DiGraph(data, iteration_limit = 5)\n",
    "for char in D:\n",
    "    print(char)\n",
    "    \n",
    "burr\n",
    "washington\n",
    "burr\n",
    "hamilton\n",
    "washington\n",
    "```\n",
    "\n",
    "#### Your Solution"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 94,
   "metadata": {},
   "outputs": [],
   "source": [
    "import random\n",
    "\n",
    "class PR_iterator:\n",
    "    \"\"\"\n",
    "    Iterator class for PR_DiGraph\n",
    "    \"\"\"\n",
    "    def __init__(self, pD):  \n",
    "        self.pD = pD #initialize instance of PR_Digraph\n",
    "        self.i = 0 #initialize tracker for iteration limit\n",
    "        self.current_state = \"hamilton\" #initialize current_state to random character\n",
    "    \n",
    "    def follow_link(self):\n",
    "        \"\"\"\n",
    "        Indicates what comes next. It will randomly generate a new next_state and will return\n",
    "        current_state(), teleport(), or raise a key error depending on character the next_state is.\n",
    "        \"\"\"\n",
    "        try:\n",
    "            self.next_state = random.choice(self.pD.linked_by(self.current_state)) # pick random character that is linked to current character\n",
    "            if (self.next_state != self.current_state):\n",
    "                self.current_state = self.next_state # set to next state = current state = if aren't already equal\n",
    "                return(self.current_state)\n",
    "            elif (self.next_state == self.current_state): # if next state = current state, call teleport function\n",
    "                return(self.teleport())\n",
    "        except KeyError:\n",
    "            return(self.teleport()) # if character is not a key, call teleport function\n",
    "            \n",
    "    def teleport(self):\n",
    "        \"\"\"\n",
    "        Sets the current state to a random key and returns the current state.\n",
    "        \"\"\"\n",
    "        self.current_state = random.choice(list(self.pD.link_dict.keys())) # set current state = to random key in data dictionary\n",
    "        return(self.current_state)\n",
    "        \n",
    "    def __next__(self): # returns next item in sequence\n",
    "        \"\"\"\n",
    "        Returns next item in sequence to complete for loop and raises exception if iteration limit is surpassed.\n",
    "        \"\"\"\n",
    "        self.i += 1 # increase count for iteration limit, notes that an iteration has occured\n",
    "        \n",
    "        if (self.i > self.pD.iteration_limit): # stop iteration if counter is greater than iteration limit\n",
    "            raise StopIteration\n",
    "        \n",
    "        if random.random() < 0.85:\n",
    "            return(self.follow_link()) # call follow_link() 85% of the time\n",
    "        else:\n",
    "            return(self.teleport()) # call teleport() 15% of the time"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 95,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "burr\n",
      "generalMontgomery\n",
      "kingGeorge\n",
      "washington\n",
      "madison\n"
     ]
    }
   ],
   "source": [
    "# run the below\n",
    "D = PR_DiGraph(data, iteration_limit = 5)\n",
    "for char in D:\n",
    "    print(char)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## (G). Compute PageRank\n",
    "\n",
    "Finally, we are ready to compute the PageRank in our data set. Initialize a `PR_DiGraph` with a large iteration limit (say, 1,000,000). Use a `for`-loop to allow your surfer to randomly move through the data set. The number of times that the surfer visits state `x` is the PageRank score of `x`. \n",
    "\n",
    "Create a `dict` which logs how many times a given state appears when iterating through the `PR_Digraph`. So, this dictionary holds the PageRank score of each state. \n",
    "\n",
    "#### Your Solution"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 96,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "{'washington': 92351, 'lee': 33578, 'hamilton': 166256, 'philipH': 26260, 'eacker': 6216, 'peggy': 20429, 'burr': 99692, 'angelica': 48198, 'jefferson': 72130, 'company': 17091, 'reynolds': 29264, 'doctor': 17181, 'men': 16997, 'madison': 37089, 'ness': 1700, 'theodosiaDaughter': 1712, 'kingGeorge': 28950, 'lafayette': 34614, 'mulligan': 21396, 'eliza': 51557, 'laurens': 27389, 'sAdams': 3340, 'women': 16831, 'jAdams': 30976, 'pendleton': 1737, 'weeks': 1641, 'knox': 3930, 'rochambeau': 3955, 'theodosiaMother': 1623, 'philipS': 7753, 'ensemble': 17056, 'conway': 1733, 'paine': 1919, 'seabury': 17190, 'schuylerSis': 19029, 'green': 3901, 'betsy': 1643, 'marthaWashington': 1672, 'sally': 2862, 'maria': 1704, 'franklin': 1933, 'generalMercer': 1668, 'generalMontgomery': 1714, 'kingLouis': 1796, 'jay': 1626, 'admiralHowe': 718}\n"
     ]
    }
   ],
   "source": [
    "newD = {} #create blank dictionary\n",
    "almostdone = PR_DiGraph(data, iteration_limit = 1000000) # create instance of PR_Digraph class\n",
    "\n",
    "for h in almostdone: # iterate over instance to set all keys to 0\n",
    "    newD[h] = 0\n",
    "for h in almostdone: # iterate over instance to set all values to its PageRank score\n",
    "    newD[h] += 1 # add 1 to count each time state x occurs\n",
    "print(newD)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## (H).  Display Your Result\n",
    "\n",
    "Use your favorite approach to show the results in sorted format, descending by PageRank score. The entries at the top should be the entries with highest PageRank. What are the most important elements in the data set? \n",
    "\n",
    "You may show either the complete list or just the top 10. \n",
    "\n",
    "Check your code by comparing your top 10 to mine. Because we are using a randomized algorithm, your results will not agree exactly with mine, but they should be relatively close. If your top 10 list is very different, then you might want to revisit your previous solutions. \n",
    "\n",
    "For Hamilton, my top 10 were: \n",
    "\n",
    "```\n",
    "[('hamilton', 166062),\n",
    " ('burr', 99180),\n",
    " ('washington', 92246),\n",
    " ('jefferson', 72450),\n",
    " ('eliza', 51485),\n",
    " ('angelica', 48042),\n",
    " ('madison', 37421),\n",
    " ('lafayette', 34297),\n",
    " ('lee', 33678),\n",
    " ('jAdams', 31121)]\n",
    "```\n",
    "\n",
    "For the flights data, my top 10 were: \n",
    "\n",
    "```\n",
    "[('LHR', 18043), # London Heathrow\n",
    " ('ATL', 16370), # Atlanta\n",
    " ('JFK', 14795), # New York JFK\n",
    " ('FRA', 14156), # Frankfurt\n",
    " ('CDG', 14073), # Charles de Gaulle (Paris)\n",
    " ('LAX', 13199), # Los Angeles\n",
    " ('ORD', 12915), # Chicago O'Hare\n",
    " ('PEK', 12525), # Beijing\n",
    " ('AMS', 12410), # Amsterdam Schiphol\n",
    " ('PVG', 11517)] # Shanghai\n",
    "```\n",
    "#### Your solution"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 99,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[('hamilton', 166256), ('burr', 99692), ('washington', 92351), ('jefferson', 72130), ('eliza', 51557), ('angelica', 48198), ('madison', 37089), ('lafayette', 34614), ('lee', 33578), ('jAdams', 30976), ('reynolds', 29264), ('kingGeorge', 28950), ('laurens', 27389), ('philipH', 26260), ('mulligan', 21396), ('peggy', 20429), ('schuylerSis', 19029), ('seabury', 17190), ('doctor', 17181), ('company', 17091), ('ensemble', 17056), ('men', 16997), ('women', 16831), ('philipS', 7753), ('eacker', 6216), ('rochambeau', 3955), ('knox', 3930), ('green', 3901), ('sAdams', 3340), ('sally', 2862), ('franklin', 1933), ('paine', 1919), ('kingLouis', 1796), ('pendleton', 1737), ('conway', 1733), ('generalMontgomery', 1714), ('theodosiaDaughter', 1712), ('maria', 1704), ('ness', 1700), ('marthaWashington', 1672), ('generalMercer', 1668), ('betsy', 1643), ('weeks', 1641), ('jay', 1626), ('theodosiaMother', 1623), ('admiralHowe', 718)]\n"
     ]
    }
   ],
   "source": [
    "# use list comprehension and output value first and key second in order to sort dictionary by increasing key\n",
    "sortedD = sorted([(v,k) for (k,v) in newD.items()]) \n",
    "\n",
    "sortedD.sort(reverse = True) # sort by decreasing key\n",
    "\n",
    "swap = [(woo[1], woo[0]) for woo in sortedD] # swap tuple spots so that key comes first and value comes second\n",
    "\n",
    "print(swap)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## (I). Submit!\n",
    "\n",
    "Check that your code is appropriately documented (comments and docstrings), and turn it in. "
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
